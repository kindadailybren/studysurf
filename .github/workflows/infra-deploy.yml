name: Infrastructure Deploy

on:
  workflow_call:

jobs:
  validate-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: infra/package-lock.json
    
    - name: Install dependencies
      run: |
        cd infra
        npm ci
    
    - name: Build TypeScript
      run: |
        cd infra
        npm run build
    
    - name: Run tests
      run: |
        cd infra
        npm test
    
    - name: Configure AWS credentials for validation
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: CDK Synth (validate templates)
      run: |
        cd infra
        npx cdk synth
    
    - name: CDK Diff (show changes)
      run: |
        cd infra
        npx cdk diff || true
      continue-on-error: true

  deploy:
    needs: validate-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: infra/package-lock.json
    
    - name: Install dependencies
      run: |
        cd infra
        npm ci
    
    - name: Build
      run: |
        cd infra
        npm run build
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: CDK Bootstrap (if needed)
      run: |
        cd infra
        npx cdk bootstrap || echo "Bootstrap already exists or not needed"
      continue-on-error: true
    
    - name: CDK Deploy
      run: |
        cd infra
        npx cdk deploy --all --require-approval never
    
    - name: Verify deployment
      run: |
        echo "Infrastructure deployed successfully!"
        echo "Listing CloudFormation stacks..."
        aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --query 'StackSummaries[?contains(StackName, `studysurf`) || contains(StackName, `StudySurf`)].{Name:StackName,Status:StackStatus}' --output table
