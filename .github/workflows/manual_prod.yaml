name: Manual Deploy on Prod Enviroment

on:
  workflow_dispatch:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }} # Check changes on the backend directory
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          backend:
            - 'infra/lambdafunctions/backend/**'
          frontend:
            - 'frontend/**'

  backend-deploy:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'latest'
        check-latest: true
    
    - name: Package Lambda function
      run: |
        cd infra/lambdaFunctions/backend
        pip install --upgrade pip
        mkdir lib
        pip install \
          --platform manylinux2014_x86_64 \
          --implementation cp \
          --python-version 3.13 \
          --only-binary=:all: \
          -t lib/ \
          -r requirements.txt
        (cd lib && zip -r ../aws_lambda.zip .)
        zip -r aws_lambda.zip app.py controllers models repositories usecases services utils

    - name: Install AWS CDK CLI
      run: |
        npm install -g aws-cdk@latest
        cdk --version

    - name: Deploy to Lambda
      run: |
        cd infra
        npm install
        # Update your Lambda function name here
        cdk deploy staging-StatelessStack --require-approval never

    - name: Verify Deployment
      run: |
        aws lambda get-function --function-name staging-Lambda-SampleFunction

  frontend-deploy:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Build application
      run: |
        cd frontend
        npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 1

    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
    
    - name: Deploy to S3
      run: |
        # Update your S3 bucket name here
        aws s3 sync frontend/dist/ s3://${{ secrets.S3_BUCKET_NAME }} --delete
    
    - name: Invalidate CloudFront
      run: |
        # Update your CloudFront distribution ID here
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"
    
    - name: Verify deployment
      run: |
        echo "Frontend deployed successfully!"
        echo "Checking if S3 bucket is accessible..."
        aws s3 ls s3://${{ secrets.S3_BUCKET_NAME }} --recursive | head -10
